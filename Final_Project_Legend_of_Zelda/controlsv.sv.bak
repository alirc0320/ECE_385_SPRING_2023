module control(
	input logic vga_clk,
	input logic Reset,
	input logic [7:0] keycode,
	input logic [9:0] DrawX, DrawY,
	input logic [1:0] color_main,
	output logic [3:0] red, green, blue,
	output logic [9:0] BallXCenter, BallYCenter //changed this
	);
	
	
	enum logic [2:0] {  Start,
							Main,
							Menu,
							Left,
							Right,
							Boss
							}   State, Next_state;
							
							
		
	always_ff @ (posedge vga_clk or posedge Reset)
	begin
		if (Reset) 
			State <= Start;
		else 
			State <= Next_state;
	end
	
	
	always_comb
	begin
	// Default next state is staying at current state
	Next_state = State;
	// Default controls signal values
	red = red_start;
	green = green_start;
	blue = blue_start;
	BallXCenter = 645;
	BallYCenter = 490;
	unique case (State)
		Start :
			if(keycode == 8'h28) 
				Next_state = Main;
		Main :
			Next_state = Menu;
	
		Menu :
			case(color_main)
				2'b01:
					Next_state = Left;
				2'b10:
					Next_state = Right;
				2'b11:
					Next_state = Boss;
				default:
					Next_state = Menu;
			endcase
			
		Left: 
			if(color_main != 2'b01)
				Next_state = Menu;
		
		Right:
			if(color_main != 2'b10)
				Next_state = Menu;
		Boss:
			if(color_main != 2'b11)
				Next_state = Menu;
				
		default: ;
			
	endcase
	
	case (State)
		Start: 
			begin
				red = red_start;
				green = green_start;
				blue = blue_start;
				BallXCenter = 645;
				BallYCenter = 490;
			end
		Main:
			begin 
				red = palette_red;
				blue = palette_blue;
				green = palette_green;
				BallXCenter = 320;
				BallYCenter = 240;
			end
		Menu: 
			begin 
				red = palette_red;
				blue = palette_blue;
				green = palette_green;
				BallXCenter = 320;
				BallYCenter = 240;
			end
		Left:
			begin
				red = redone;
				blue = blueone;
				green = greenone;
				BallXCenter = 320;
				BallYCenter = 240;
			end
		Right:
			begin
				red = redtwo;
				blue = bluetwo;
				green = greentwo;
				BallXCenter = 320;
				BallYCenter = 240;
			end
		Boss:
			begin
				red = redboss;
				blue = blueboss;
				green = greenboss;
				BallXCenter = 320;
				BallYCenter = 240;
			end
	default: ;
	
	endcase
end
	
	
	
	
	
//logic instantitation for backround mapper.
logic [16:0] rom_address;
logic [4:0] rom_q;

logic [3:0] palette_red, palette_green, palette_blue;

assign rom_address = (DrawX*256/640) + (DrawY*256/480 * 256);
	
	
back_rom back_rom (
	.clock   (vga_clk),
	.address (rom_address),
	.q       (rom_q)
);

back_palette back_palette (
	.index (rom_q),
	.red   (palette_red),
	.green (palette_green),
	.blue  (palette_blue)
);

	
	
	
	
	
	
	
	
	
	//logic instantiation for the start screen

logic [15:0] rom_address_start;
logic [2:0] rom_q_start;

logic [3:0] red_start, green_start, blue_start;

assign rom_address_start = (DrawX*256/640) + (DrawY*256/480 * 256);



StartRom start_rom (
	.clock   (vga_clk),
	.address (rom_address_start),
	.q       (rom_q_start)
);

start_palette start_palette (
	.index (rom_q_start),
	.red   (red_start),
	.green (green_start),
	.blue  (blue_start)
);
	


	
//logic instantiation for room_one

logic [15:0] rom_address_roomone;
logic [3:0] rom_q_roomone;

logic [3:0] redone, greenone, blueone;

assign rom_address_roomone = (DrawX*256/640) + (DrawY*256/480 * 256);

	
OneRom room_one_rom (
	.clock   (vga_clk),
	.address (rom_address_roomone),
	.q       (rom_q_roomone)
);

room_one_palette room_one_palette (
	.index (rom_q_roomone),
	.red   (redone),
	.green (greenone),
	.blue  (blueone)
);
	
	
//logic instantiation for room_two

logic [15:0] rom_address_roomtwo;
logic [3:0] rom_q_roomtwo;

logic [3:0] redtwo, greentwo, bluetwo;

assign rom_address_roomtwo = (DrawX*256/640) + (DrawY*256/480 * 256);

TwoRom room_two_rom (
	.clock   (vga_clk),
	.address (rom_address_roomtwo),
	.q       (rom_q_roomtwo)
);

room_two_palette room_two_palette (
	.index (rom_q_roomtwo),
	.red   (redtwo),
	.green (greentwo),
	.blue  (bluetwo)
);


//logic instantiation for boss_room
logic [15:0] rom_address_boss;
logic [3:0] rom_q_boss;

logic [3:0] redboss, greenboss, blueboss;

assign rom_address_boss = (DrawX*256/640) + (DrawY*256/480 * 256);
	
	
BossRom boss_room_rom (
	.clock   (vga_clk),
	.address (rom_address_boss),
	.q       (rom_q_boss)
);

boss_room_palette boss_room_palette (
	.index (rom_q_boss),
	.red   (redboss),
	.green (greenboss),
	.blue  (blueboss)
);

	
endmodule 